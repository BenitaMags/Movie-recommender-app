pipeline {
    agent {
        label 'ec2-worker' // Specify your EC2 worker node label
    }
    
    environment {
        // Docker Hub credentials (configure in Jenkins credentials)
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE_NAME = 'your-dockerhub-username/movie-recommender-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        
        // Kubernetes namespace
        K8S_NAMESPACE = 'movie-recommender'
        
        // Application name
        APP_NAME = 'movie-recommender-app'
    }
    
    tools {
        // Configure these tools in Jenkins Global Tool Configuration
        nodejs '18' // Node.js version
        dockerTool 'docker'
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "üîÑ Checking out code from GitHub repository..."
                    git branch: 'main', 
                        url: 'https://github.com/BenitaMags/Movie-recommender-app.git'
                    
                    // Get commit info for tagging
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Environment Setup') {
            steps {
                script {
                    echo "üîß Setting up build environment..."
                    sh '''
                        echo "Node.js version:"
                        node --version
                        echo "NPM version:"
                        npm --version
                        echo "Docker version:"
                        docker --version
                    '''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo "üì¶ Installing application dependencies..."
                    sh '''
                        # Install frontend dependencies
                        if [ -f package.json ]; then
                            npm ci --only=production
                        fi
                        
                        # Install backend dependencies if exists
                        if [ -f backend/package.json ]; then
                            cd backend
                            npm ci --only=production
                            cd ..
                        fi
                        
                        # Install Python dependencies if requirements.txt exists
                        if [ -f requirements.txt ]; then
                            pip3 install -r requirements.txt
                        fi
                    '''
                }
            }
        }
        
        stage('Code Quality & Security Scan') {
            parallel {
                stage('Lint Code') {
                    steps {
                        script {
                            echo "üîç Running code linting..."
                            sh '''
                                # JavaScript/TypeScript linting
                                if [ -f package.json ] && npm list eslint > /dev/null 2>&1; then
                                    npm run lint || echo "Linting completed with warnings"
                                fi
                                
                                # Python linting if applicable
                                if [ -f requirements.txt ]; then
                                    pip3 install flake8 || true
                                    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
                                fi
                            '''
                        }
                    }
                }
                
                stage('Security Scan') {
                    steps {
                        script {
                            echo "üõ°Ô∏è Running security vulnerability scan..."
                            sh '''
                                # NPM audit for Node.js dependencies
                                if [ -f package.json ]; then
                                    npm audit --audit-level=high || echo "Security scan completed with warnings"
                                fi
                                
                                # Python safety check if applicable
                                if [ -f requirements.txt ]; then
                                    pip3 install safety || true
                                    safety check || echo "Python security scan completed"
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    echo "üß™ Running application tests..."
                    sh '''
                        # Run frontend tests if test script exists
                        if [ -f package.json ] && npm run | grep -q "test"; then
                            npm test || echo "Frontend tests completed"
                        fi
                        
                        # Run backend tests if applicable
                        if [ -f backend/package.json ]; then
                            cd backend
                            if npm run | grep -q "test"; then
                                npm test || echo "Backend tests completed"
                            fi
                            cd ..
                        fi
                        
                        # Run Python tests if applicable
                        if [ -f requirements.txt ] && [ -d tests ]; then
                            python3 -m pytest tests/ || echo "Python tests completed"
                        fi
                    '''
                }
            }
            post {
                always {
                    // Publish test results if they exist
                    script {
                        if (fileExists('test-results.xml')) {
                            publishTestResults testResultsPattern: 'test-results.xml'
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "üê≥ Building Docker image..."
                    
                    // Create Dockerfile if it doesn't exist
                    if (!fileExists('Dockerfile')) {
                        writeFile file: 'Dockerfile', text: '''
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
'''
                    }
                    
                    sh '''
                        docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
                        docker build -t ${DOCKER_IMAGE_NAME}:latest .
                        docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT}
                    '''
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                script {
                    echo "üì§ Pushing Docker image to registry..."
                    sh '''
                        echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin
                        docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                        docker push ${DOCKER_IMAGE_NAME}:latest
                        docker push ${DOCKER_IMAGE_NAME}:${GIT_COMMIT_SHORT}
                        docker logout
                    '''
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "üöÄ Deploying to Kubernetes cluster..."
                    
                    // Create Kubernetes manifests
                    writeFile file: 'k8s-deployment.yaml', text: """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}
  namespace: ${K8S_NAMESPACE}
  labels:
    app: ${APP_NAME}
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ${APP_NAME}
  template:
    metadata:
      labels:
        app: ${APP_NAME}
    spec:
      containers:
      - name: ${APP_NAME}
        image: ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}-service
  namespace: ${K8S_NAMESPACE}
spec:
  selector:
    app: ${APP_NAME}
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${APP_NAME}-ingress
  namespace: ${K8S_NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: movie-recommender.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ${APP_NAME}-service
            port:
              number: 80
"""
                    
                    sh '''
                        # Create namespace if it doesn't exist
                        kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        
                        # Apply Kubernetes manifests
                        kubectl apply -f k8s-deployment.yaml
                        
                        # Wait for deployment to be ready
                        kubectl rollout status deployment/${APP_NAME} -n ${K8S_NAMESPACE} --timeout=300s
                        
                        # Verify deployment
                        kubectl get pods -n ${K8S_NAMESPACE} -l app=${APP_NAME}
                        kubectl get services -n ${K8S_NAMESPACE}
                    '''
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    echo "üè• Performing health check..."
                    sh '''
                        # Wait for service to be ready
                        sleep 30
                        
                        # Get service endpoint
                        SERVICE_IP=$(kubectl get service ${APP_NAME}-service -n ${K8S_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
                        
                        if [ "$SERVICE_IP" != "pending" ] && [ "$SERVICE_IP" != "" ]; then
                            echo "Service is available at: http://$SERVICE_IP"
                            # Perform health check
                            curl -f http://$SERVICE_IP/health || echo "Health check endpoint not available"
                        else
                            echo "Service is still pending external IP assignment"
                            kubectl get service ${APP_NAME}-service -n ${K8S_NAMESPACE}
                        fi
                        
                        # Show deployment status
                        kubectl get all -n ${K8S_NAMESPACE}
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üßπ Cleaning up workspace..."
                // Clean up Docker images to save space
                sh '''
                    docker image prune -f
                    docker system prune -f --volumes
                '''
                
                // Archive artifacts
                archiveArtifacts artifacts: 'k8s-deployment.yaml', allowEmptyArchive: true
                
                // Clean workspace
                cleanWs()
            }
        }
        
        success {
            script {
                echo "‚úÖ Pipeline completed successfully!"
                // Add notification here (Slack, email, etc.)
                // slackSend(channel: '#deployments', 
                //          color: 'good', 
                //          message: "‚úÖ Movie Recommender App deployed successfully - Build #${BUILD_NUMBER}")
            }
        }
        
        failure {
            script {
                echo "‚ùå Pipeline failed!"
                // Add failure notification here
                // slackSend(channel: '#deployments', 
                //          color: 'danger', 
                //          message: "‚ùå Movie Recommender App deployment failed - Build #${BUILD_NUMBER}")
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è Pipeline completed with warnings!"
            }
        }
    }
}
